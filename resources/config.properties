# The exposed validation types
validator.type = main
validator.typeOptions.main = basic, advanced
# The description to show for the different validator types. These are defined in properties such as validator.typeLabel.TYPE.
validator.typeLabel.main = UML model validation
validator.label.optionLabel = Mode
# Default type option labels provided via validator.optionLabel.OPTION properties. Specific ones can be set per type if needed via validator.typeOptionLabel.TYPE.OPTION.
validator.optionLabel.basic = basic
validator.optionLabel.advanced = advanced
# The validator.completeTypeOptionLabel.TYPE.OPTION properties can be used to define a complete label for the validation type. The default is "TYPE - OPTION" (e.g. BRegDCAT-AP - Version 2.00)
validator.completeTypeOptionLabel.main.basic = Validated with basic configuration
validator.completeTypeOptionLabel.main.advanced = Validated with advanced configuration

# SVRL-producing XSLT to transform/validate the input with.

validator.schematronFile.main.advanced = src/svrl-conventions-report.xsl

# The context files you expect users to provide alongside the input. All paths are relative to the domain root.

validator.contextFile.main.advanced.0.path = userConfig/config-parameters.xsl

validator.contextFile.main.advanced.0.label = Config parameters
validator.contextFile.main.advanced.1.path = userConfig/namespaces.xml
validator.contextFile.main.advanced.1.label = Namespaces

validator.contextFile.main.advanced.2.path = userConfig/xsdAndRdfDataTypes.xml

validator.contextFile.main.advanced.2.label = XSD and RDF Datatypes

validator.schematronFile.main.basic = src/svrl-conventions-report.xsl

validator.contextFile.main.basic.0.path = userConfig/namespaces.xml

validator.contextFile.main.basic.0.label = Namespaces

validator.bannerHtml=<div class="mt-4 container"><div class=row><div class=col-12><div class=d-table><div class=d-table-row><div class="cursor-pointer d-table-cell validatorReload"><h1>UML Model Validator</h1></div></div><div class=d-table-row><div class="pb-3 pt-3"><p>This service allows you to assess the conformance of a&nbsp;<strong>UML Model </strong>with the <a href=https://semiceu.github.io/style-guide/1.0.0/gc-conceptual-model-conventions.html target=_blank>SEMIC Style Guide</a>. For each UML guideline in the style guide, a set of rules have been implemented, which asses whether a UML model convention is respected. These rules specify constraints on the structure, relationships, and properties within the model. The set of rules employed during validation are documented <a href=https://meaningfy-ws.github.io/model2owl-docs/public-review/checkers/model2owl-checkers.html target=_blank>here</a>.<p>The content to validate can be provided as a <strong>file</strong> or a <strong>URI reference</strong>. Documentation on using the Interoperability Test Bed's XML validator is available <a href=https://www.itb.ec.europa.eu/docs/guides/latest/validatingXML/index.html#step-6-use-the-validator target=_blank>here</a>.<p><a href=# data-target=#infoModal data-toggle=modal>How to Use</a></div></div></div></div></div></div><div class="fade modal"id=infoModal role=dialog><div class="modal-dialog modal-lg"style=width:90%;max-width:1140px><div class=modal-content><div class=modal-header><h3>How to Use</h3></div><div class=modal-body><h2>Validator Options</h2><p>This validator has 2 options available: basic and advanced. The difference between the two is the number of configuration files. In the basic mode, only the namespaces are to be defined, while in advanced mode, multiple configuration files must be defined. For easy use, choose the basic mode, download the boilerplates for the necessary config and change them accordingly.<h2>Configuration Files Boilerplates</h2><p>Boilerplate templates for the configuration files related to validator options are available as follows:<ul><li><a href=https://github.com/meaningfy-ws/model2owl-validator/tree/main/config_boileplates/basic target=_blank>Basic Mode Boilerplates</a><li><a href=https://github.com/meaningfy-ws/model2owl-validator/tree/main/config_boileplates/advanced target=_blank>Advanced Mode Boilerplates</a></ul><h2>Naming Conventions and File Types</h2><p>The validator utilizes an input file and several configuration files, all of which must adhere to specific conventions for proper functionality. The majority of files used in this validator are XML files (e.g., <code>my-file.xml</code>) that includes the input file. There is only one configuration file, which is an XSLT file that holds variables used by the system.<h3>File names should follow the instructions below:</h3><ul><li><code>Config Parameters File: config-parameters.xsl</code><li><code>Namespaces File: namespaces.xml</code><li><code>XSD and RDF Datatypes File: xsdAndRdfDataTypes.xml</code></ul><p>For the input file there is no naming convention, but it should be an XML/XMI file that follow the conventions presented below<h2>Input File</h2><p>This file must be an XML/XMI file, and make sure that uses XMI version 2.5.1 and UML version 2.5.1. The namespaces to check in the file are: <code>uml="http://www.omg.org/spec/UML/20131001"</code> and <code>xmi="http://www.omg.org/spec/XMI/20131001"</code>.<h3>Sample:</h3><code class=code_block>&lt;?xml version="1.0" encoding="windows-1252"?><br>&lt;xmi:XMI xmlns:uml="http://www.omg.org/spec/UML/20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:umldi="http://www.omg.org/spec/UML/20131001/UMLDI" xmlns:dc="http://www.omg.org/spec/UML/20131001/UMLDC" xmlns:thecustomprofile="http://www.sparxsystems.com/profiles/thecustomprofile/1.0"><br>&lt;xmi:Documentation exporter="Enterprise Architect" exporterVersion="6.5" exporterID="1559"/></code><p>This should be controlled when the export process is done from your modeling tool used.<h2>Configuration Files</h2><p>As presented above, this validator will use a maximum of three configuration files depending on the UML model validation option you have selected (check the Validator Options section).<h3>Config Parameters File</h3><p>This is an XSLT file that contains a set of variables used by the system when the model validation is executed. Some variables can be changed, while others should not be altered as they are preconfigured. A boilerplate for config parameters can be found <a href=https://github.com/meaningfy-ws/model2owl-validator/tree/main/config_boileplates/basic target=_blank>here</a>. The boilerplate includes comments that instruct what can and cannot be changed.<h4>Sample:</h4><code class=code_block>&nbsp;&lt;!-- Types of elements and names for attribute types that are acceptable to produce object properties --><br>&nbsp;&lt;xsl:variable name="acceptableTypesForObjectProperties" select="('epo:Identifier', 'rdfs:Literal')"/><br><br>&nbsp;&lt;!-- Acceptable stereotypes --><br>&nbsp;&lt;xsl:variable name="stereotypeValidOnAttributes" select="()"/><br>&nbsp;&lt;!-- ... other variables ... --><br><br>&nbsp;&lt;!-- Allowed characters for a normalized string (characters allowed in a QName) --><br>&nbsp;&lt;xsl:variable name="allowedStrings" select="'^[\w\d-_:]+$'"/><br></code><p>There are two types of data that you can pass in the variables: a list or a string. For lists, the variable value should always be surrounded by quotes (<code>""</code>), and the actual values should be enclosed in single quotes (<code>''</code>). For strings, the principle remains the same:</p><code>&lt;xsl:variable name="my-variable" select="'my string value'"/></code><h4>Notes</h4><ul><li>Do not delete variables: Each variable serves a purpose in the validation process.<li>Maintain variable types: Do not alter the type of variable (e.g., from a list to a string). If a variable is originally set as a list, it must remain a list.<li>If a variable is unnecessary or if you prefer not to impose restrictions, leave the variable with an empty list or string. See example below:</ul><code class=code_block>empty string variable<br>&lt;xsl:variable name="my-variable" select="''"/><br>&nbsp;&nbsp;&nbsp;&nbsp;empty list variable<br>&lt;xsl:variable name="stereotypeValidOnAttributes" select="()"/><br></code><h3>Namespaces File</h3><p>This file will hold the namespace values and names used in the model that will be validated. A boilerplate for config parameters can be found <a href=https://github.com/meaningfy-ws/model2owl-validator/tree/main/config_boileplates/basic target=_blank>here</a>.<h4>Sample:</h4><code class=code_block>&lt;?xml version="1.0" encoding="UTF-8"?><br>&lt;prefixes xmlns="http://publications.europa.eu/ns/"><br>&nbsp;&nbsp;&nbsp;&lt;prefix name="" value="http://data.europa.eu/a4g/ontology#"/><br>&nbsp;&nbsp;&nbsp;&lt;!-- ... other prefixes ... --><br>&lt;/prefixes></code><h3>XSD and RDF Datatypes File</h3><p>This file holds declarations of XSD and RDF datatypes. A boilerplate for this file can be found <a href=https://github.com/meaningfy-ws/model2owl-validator/tree/main/config_boileplates/advanced target=_blank>here</a>.<h4>Sample:</h4><code class=code_block>&lt;?xml version="1.0" encoding="UTF-8"?><br>&lt;datatypes xmlns="http://publications.europa.eu/ns/"><br>&nbsp;&nbsp;&nbsp;&lt;datatype namespace="xsd" qname="xsd:anyURI"/><br>&nbsp;&nbsp;&nbsp;&lt;datatype namespace="xsd" qname="xsd:base64Binary"/><br>&nbsp;&nbsp;&nbsp;&lt;datatype namespace="xsd" qname="xsd:boolean"/><br>&nbsp;&nbsp;&nbsp;&lt;datatype namespace="xsd" qname="xsd:byte"/><br>&nbsp;&nbsp;&nbsp;&lt;datatype namespace="xsd" qname="xsd:date"/><br>&nbsp;&nbsp;&nbsp;&lt;datatype namespace="xsd" qname="xsd:dateTime"/><br>&nbsp;&nbsp;&nbsp;&lt;datatype namespace="rdfs" qname="rdfs:Literal"/><br>&lt;/datatypes><br></code><p>The file should include the XML declaration as shown in the sample (<code>&lt;?xml version="1.0" encoding="UTF-8"?></code>).</div><div class=modal-footer><button class="btn btn-default"data-dismiss=modal type=button>Close</button></div></div></div></div><hr class="mt-4 mb-4"><style>code{white-space:pre-line}.code_block{display:block;padding:9.5px;margin:0 0 10px;font-size:13px;line-height:1.42857143;color:#333;word-break:break-all;word-wrap:break-word;background-color:#f5f5f5;border:1px solid #ccc;border-radius:4px;font-family:Menlo,Monaco,Consolas,"Courier New",monospace;overflow:auto}</style>